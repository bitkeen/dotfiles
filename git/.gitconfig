[include]
    path = ~/.gitconfig.local
[advice]
    detachedHead = false
[alias]
    a = add
    aa = add --all
    ai = add --interactive
    ap = add --patch
    bl = blame
    ; Copy name of the current branch.
    bc = "!git rev-parse --abbrev-ref HEAD | clipcopy --trim-newline && clippaste"
    br = branch
    brd = branch --delete --force
    brm = branch --move
    ; Track remote branch origin/<current branch name>.
    bru = "!git branch --set-upstream-to=origin/\"$(git rev-parse --abbrev-ref HEAD)\""
    bs = bisect
    co = checkout
    cob = checkout -b
    cof = "!fzf-git-checkout"
    com = checkout master
    cop = checkout --patch
    chp = cherry-pick
    chpa = cherry-pick --abort
    chpc = cherry-pick --continue
    ; Ignore the local timezone and commit with UTC.
    ci = "!git commit --date=\"$(date -u '+%Y-%m-%dT%H:%M:%S%z')\""
    cia = commit --amend
    cian = commit --amend --no-edit
    ; Amend and push.
    aphf = "!git commit --amend --no-edit \
             && git push --force-with-lease --set-upstream"
    ; Fixup HEAD if no argument is provided.
    cif = "!sh -c '[ -z \"$1\" ] \
            && git commit --fixup HEAD || \
            git commit --fixup \"$1\"' -"
    cim = "!git commit --date=\"$(date -u '+%Y-%m-%dT%H:%M:%S%z')\" -m"
    cl = clone
    cn = clean
    df = diff
    dfc = diff --check
    dfm = diff master
    dfs = diff --staged
    dt = difftool
    ; Show the hash of HEAD.
    hh = rev-parse --short HEAD
    lg = log --oneline --format='%C(auto)%h%C(reset) %s %C(cyan)<%aN>%C(reset) %C(green)%ar%C(reset) (%ad)'
    lgg = log --all --graph --format='%C(auto)%h%C(reset)%C(auto)%d%C(reset) %s %C(cyan)<%aN>%C(reset) %C(green)%ar%C(reset) (%ad)'
    lglr = log --left-right --oneline --format='%C(auto)%m%C(reset) %C(auto)%h%C(reset) %s %C(cyan)<%aN>%C(reset) %C(green)%ar%C(reset) (%ad)'
    lglrm = log --left-right --oneline HEAD...master --format='%C(auto)%m%C(reset) %C(auto)%h%C(reset) %s %C(cyan)<%aN>%C(reset) %C(green)%ar%C(reset) (%ad)'
    ; Compare with the previous branch.
    lglrp = log --left-right --oneline HEAD...@{-1} --format='%C(auto)%m%C(reset) %C(auto)%h%C(reset) %s %C(cyan)<%aN>%C(reset) %C(green)%ar%C(reset) (%ad)'
    ; Compare with tracked remote branch.
    lglru = log --left-right --oneline HEAD...HEAD@{upstream} --format='%C(auto)%m%C(reset) %C(auto)%h%C(reset) %s %C(cyan)<%aN>%C(reset) %C(green)%ar%C(reset) (%ad)'
    lps = log -p -S
    mg = merge
    mga = merge --abort
    mgc = merge --continue
    mgm = merge master
    ; git-open has to be installed (https://github.com/paulirish/git-open).
    o = open
    ph = push --set-upstream
    phf = push --force-with-lease --set-upstream
    pl = pull
    plrb = pull --rebase
    rb = rebase
    rba = rebase --abort
    rbi = rebase --interactive
    rbim = rebase --interactive master
    rbc = rebase --continue
    rbs = rebase --skip
    rbm = rebase master
    rs = reset
    rsp = reset --patch
    rst = restore
    rmt = remote
    rml = remote --verbose
    rv = revert
    rva = revert --abort
    sh = stash
    shm = stash push --message
    shph = stash push
    shpp = stash push --patch
    ; Run 'git stash drop' if no argument is provided,
    ; otherwise run 'git stash drop stash@{$1}'.
    shd = "!sh -c '[ -z \"$1\" ] \
            && git stash drop || \
            git stash drop stash@{\"$1\"}' -"
    shl = stash list
    shp = "!sh -c '[ -z \"$1\" ] \
            && git stash pop || \
            git stash pop stash@{\"$1\"}' -"
    shsw = "!sh -c '[ -z \"$1\" ] \
            && git stash show -p || \
            git stash show -p stash@{\"$1\"}' -"
    sm = submodule
    sma = submodule add
    smu = submodule update --init --recursive
    spl = "!git stash && git pull && git stash pop"
    st = status
    ; --short - short format, --branch - show branch info in short format
    ss = status --short --branch
    sw = show
[core]
    editor = vim
    whitespace = true
    ; Use delta if available, use less otherwise.
    ; --tabs=4 sets tab width to 4 (default is 8).
    pager = "if command -v delta > /dev/null; then delta --tabs=4 --color-only; else less --tabs=4; fi"
[commit]
    verbose = true
[color "status"]
    untracked = yellow
[diff]
    tool = vimdiff
    colorMoved = zebra
[init]
    defaultBranch = master
[interactive]
    ; --tabs=4 didn't work for some reason in both delta and less.
    diffFilter = "if command -v delta > /dev/null; then delta --color-only; else less; fi"
[log]
    date = format-local:%F %T
[pull]
    ff = only
    default = current
[push]
    default = current
[rebase]
    autosquash = true
    instructionFormat = "%s <%aN> %ar (%ai)"
[status]
    submodulesummary = 1
[url "https://github.com/"]
    insteadOf = gh://
[credential]
    helper = /usr/lib/git-core/git-credential-libsecret
[submodule]
    fetchJobs = 8
[delta]
    theme = base16
