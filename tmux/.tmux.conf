# Main {{{

# The spaces around the `>` are actually nbsps so it's easy
# to search the previous prompt (see .bashrc).
SHELL_PROMPT_REGEXP='^[+-] .* > '
DB_PROMPT_REGEXP='^ > '

# Source tmuxline snapshot if it exists.
if-shell "test -f ~/.tmux/tmuxline" "source ~/.tmux/tmuxline"

# Remove delay when hitting Esc in vim.
set -s escape-time 0

# Enable 256-color support.
set -g default-terminal "tmux-256color"

# Enable mouse mode.
set -g mouse on
# Check that stdin is not empty with ifne before calling xclip-in. Otherwise
# copy-pipe-and-cancel will clear clipboard when run on an empty selection.
set -g copy-command 'ifne ~/.local/bin/xclip-in'

# Index windows and panes from 1, not 0.
set -g base-index 1
setw -g pane-base-index 1

# Set scrollback buffer size. Default is 2000.
set -g history-limit 100000

set-window-option -g mode-keys vi

# Set emacs key bindings for command prompt and search.
# This is similar to how Vim behaves in command mode.
set -g status-keys emacs

set -g set-titles on
set -g set-titles-string "#S"

# Renumber sessions.
set-hook -g session-created "run ~/.local/bin/tmux-renumber-sessions"
set-hook -g session-closed  "run ~/.local/bin/tmux-renumber-sessions"

# Expand the default list (" -_@") of word separators.
# The second space is an nbsp.
set-option -g word-separators "  -@#:=<>/[]{}()?,.~''\\\"\""

set -g focus-events on

set -g clock-mode-colour white

# }}}

# Bindings {{{

# Remap prefix from 'C-b' to 'C-space'
unbind-key C-b
set-option -g prefix C-space
bind-key C-space send-prefix

# Reload config file.
bind-key R source-file ~/.tmux.conf; display-message "Config reloaded."

# Rebind prefix-c to keep the current directory in new windows.
unbind-key c
bind-key c new-window -c "#{pane_current_path}"

bind-key C command-prompt -p "Window name:" "new-window -n '%%'"

bind-key X confirm-before -p "kill-window #W? (y/n)" kill-window

# Split a pane.
# Open new panes with the path of current pane.
bind-key \\ split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"
# Split a full window.
bind-key | split-window -fh -c "#{pane_current_path}"
bind-key _ split-window -fv -c "#{pane_current_path}"

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator.
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -T root C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -T root C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -T root C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -T root C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -T root C-\\ if-shell "$is_vim" "send-keys C-\\\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\\ select-pane -l

# Default for begin-selection.
unbind-key -T copy-mode-vi Space
# Default for rectangle-toggle.
unbind-key -T copy-mode-vi v
# Default for copy-selection-and-cancel.
unbind-key -T copy-mode-vi MouseDragEnd1Pane

bind-key -T copy-mode-vi v send-keys -X begin-selection
# Visual Block mode.
bind-key -T copy-mode-vi C-v {
    send-keys -X begin-selection
    send-keys -X rectangle-toggle
}

# Copy to system clipboard using xclip.
bind-key -T copy-mode-vi y {
    send-keys -X copy-pipe
}
bind-key -T copy-mode-vi MouseDragEnd1Pane {
    send-keys -X copy-pipe
}
# Copy to the end of the line.
# Sending Left is to skip copying the newline.
bind-key -T copy-mode-vi Y {
    send-keys -X begin-selection
    send-keys -X end-of-line
    send-keys Left
    send-keys -X stop-selection
    # Sleep a bit to get a visual highlight of the copied area.
    run-shell 'sleep .2'
    send-keys -X copy-pipe
}
# Copy selection and exit copy mode.
bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel

# Resizing (mouse also works).
unbind-key Left
unbind-key Right
unbind-key Down
unbind-key Up
bind-key -r Left resize-pane -L 5
bind-key -r Right resize-pane -R 5
bind-key -r Down resize-pane -D 5
bind-key -r Up resize-pane -U 5
bind-key -r M-h resize-pane -L 5
bind-key -r M-l resize-pane -R 5
bind-key -r M-j resize-pane -D 5
bind-key -r M-k resize-pane -U 5

# Clear history.
bind-key h clear-history

# Faster binding for upward search.
bind-key / {
    copy-mode
    send-keys ?
}

# Save current pane history to a file.
bind-key S command-prompt -p 'Save history to file:' -I '~/tmux-history-%Y-%m-%d_%H-%M-%S.log' 'capture-pane -S - ; save-buffer %1 ; delete-buffer'

# Go to the previous shell prompt.
bind-key b {
    copy-mode
    send-keys -X start-of-line
    send-keys -X search-backward $SHELL_PROMPT_REGEXP
}
# Here the spaces are Narrow No-Break Space (U+202F).
# Such prompts are set up for db clients in fzf-dbs script.
bind-key v {
    copy-mode
    send-keys -X start-of-line
    send-keys -X search-backward $DB_PROMPT_REGEXP
}
# Select the previous shell prompt or command output.
# From https://github.com/ianthehenry/dotfiles/blob/master/.tmux.conf.
bind-key B {
    copy-mode
    send-keys -X clear-selection
    send-keys -X start-of-line
    send-keys -X start-of-line
    send-keys -X cursor-up
    send-keys -X start-of-line
    send-keys -X start-of-line

    if -F "#{m/r:${SHELL_PROMPT_REGEXP}.*,#{copy_cursor_line}}" {
        send-keys -X search-forward-text "> "
        send-keys -X stop-selection
        send-keys -X -N 2 cursor-right
        send-keys -X begin-selection
        send-keys -X end-of-line
        send-keys -X end-of-line
        send-keys -X cursor-left
    } {
        send-keys -X end-of-line
        send-keys -X end-of-line
        send-keys -X cursor-left
        send-keys -X begin-selection
        send-keys -X search-backward $SHELL_PROMPT_REGEXP
        send-keys -X end-of-line
        send-keys -X end-of-line
        send-keys -X cursor-right
    }
    send-keys -X stop-selection
}
# Select the previous database prompt or command output.
bind-key V {
    copy-mode
    send-keys -X clear-selection
    send-keys -X start-of-line
    send-keys -X start-of-line
    send-keys -X cursor-up
    send-keys -X start-of-line
    send-keys -X start-of-line

    if -F "#{m/r:${DB_PROMPT_REGEXP}.*,#{copy_cursor_line}}" {
        send-keys -X search-forward-text '> '
        send-keys -X stop-selection
        send-keys -X -N 2 cursor-right
        send-keys -X begin-selection
        send-keys -X end-of-line
        send-keys -X end-of-line
        send-keys -X cursor-left
    } {
        send-keys -X cursor-up
        send-keys -X end-of-line
        send-keys -X end-of-line
        send-keys -X cursor-left
        send-keys -X begin-selection
        send-keys -X search-backward $DB_PROMPT_REGEXP
        send-keys -X end-of-line
        send-keys -X end-of-line
        send-keys -X cursor-right
    }
    send-keys -X stop-selection
}

unbind-key -T root Tab

# Disable window switching by scrolling the statusbar with the mouse
# wheel.
unbind-key -T root WheelUpStatus
unbind-key -T root WheelDownStatus

# Since windows are indexed from 1 now.
bind-key 0 select-window -t :=10

# Swap windows and panes.
bind-key W choose-tree -Zw "swap-window -t '%%'"
bind-key P choose-tree -Z "swap-pane -t '%%'"

# Similar to default, but sort sessions by name.
bind-key s choose-session -O name

# Send clear screen command (-x flag is to keep scrollback buffer).
bind-key f send-keys 'clear -x' Enter
# Default for Prefix+f.
bind-key C-f command-prompt "find-window -Z -- '%%'"

# }}}

# Plugins {{{

set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @prefix_highlight_prefix_prompt 'Prefix'
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr 'fg=#333333,bg=yellow'

set -g @plugin 'tmux-plugins/tmux-open'
set -g @open-S 'https://www.duckduckgo.com/'
set -g @open 'O'

set -g @plugin 'tmux-plugins/tmux-resurrect'
# Restore vim sessions.
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-processes 'ncmpcpp newsboat "~ipython->ipython" "docker stats" "vim -c WrappedObsession->vs"'

set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-save-interval '3'
set -g @continuum-restore 'on'
# Automatically start tmux when computer is turned on.
# See https://github.com/tmux-plugins/tmux-continuum/blob/master/docs/systemd_details.md
# for details.
set -g @continuum-boot 'on'

# Extract URLs to open in browser, fzf is required.
set -g @plugin 'wfxr/tmux-fzf-url'
# Default for prefix+o is "select-pane -t :.+",
# which selects the next pane.
unbind-key o
set -g @fzf-url-bind 'o'

# Extract paths and open selected in $EDITOR
set -g @plugin 'bitkeen/tmux-path-extractor'
set -g @fpp-key 'F'

set -g @plugin 'fcsonline/tmux-thumbs'
set -g @thumbs-key u
set -g @thumbs-command 'echo -n {} | ~/.local/bin/xclip-in'
set -g @thumbs-upcase-command 'echo -n {} | ~/.local/bin/xclip-in && tmux send-keys "$(~/.local/bin/xclip-out)"'
# Assign the same hint for the same matched strings.
set -g @thumbs-unique 0
set -g @thumbs-hint-bg-color yellow
set -g @thumbs-hint-fg-color black
set -g @thumbs-alphabet qwerty
# Match systemd units.
set -g @thumbs-regexp-1 '((\S+\.)(service|socket|device|mount|automount|swap|target|path|timer|slice|scope))'

# Initialize Tmux Plugin Manager (keep this line at the very bottom of tmux.conf).
run -b '~/.tmux/plugins/tpm/tpm'

# }}}
