#!/bin/sh
# A simple countdown timer, takes time as an argument.
# Path to timer sound should be provided in TIMER_SOUND environment
# variable.
# https://superuser.com/questions/611538/is-there-a-way-to-display-a-countdown-or-stopwatch-timer-in-a-terminal
# Requirements:
# - dunst
# - pulseaudio

if [ -z "$1" ]; then
    echo 'Time not specified'
    exit 1
fi

stty -echo  # Disable keyboard echo.
tput civis  # Hide cursor.
trap 'tput cnorm; echo; exit 1' INT  # Bring cursor back on interrupts.

# Time is in seconds if there is an 's' at the end, in hours if there
# is an 'h' at the end, in minutes by default.
if echo "$1" | grep -q 's$'; then
    # Clean up the argument.
    time_seconds=$(echo "$1" | sed -e 's/[A-Za-z]//')
elif echo "$1" | grep -q 'h$'; then
    time_seconds=$(echo "$1" | sed -e 's/[A-Za-z]//')
    time_seconds="$time_seconds*3600"
else
    time_seconds=$(echo "$1" | sed -e 's/[A-Za-z]//')
    time_seconds="$time_seconds*60"
fi

date1=$(($(date +%s) + time_seconds));
while [ "$date1" -ge "$(date +%s)" ]; do
    printf '%s\r' "$(date -u --date @$((date1 - $(date +%s))) +%H:%M:%S)";
    sleep 0.1
done

pgrep -x dunst >/dev/null &&
    notify-send -a 'timer' 'Time is over' &&
    [ -n "$TIMER_SOUND" ] &&
    paplay "$TIMER_SOUND"

printf '\n'
tput cnorm  # Bring cursor back.
