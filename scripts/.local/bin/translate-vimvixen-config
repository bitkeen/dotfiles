#!/usr/bin/env python3
"""
Translate vimvixen keymaps.

Print original config with translated keymaps added.
"""
import argparse
import json
import re
import sqlite3
from pathlib import Path

INPUT_CONFIG_FILE = f'{Path.home()}/.dotfiles/vimvixen-config.json'
KEYS_EN = "qwertyuiop[]asdfghjkl;'zxcvbnm,.QWERTYUIOP{}ASDFGHJKL:ZXCVBNM<>"
KEYS_RU = "йцукенгшщзхъфывапролджэячсмитьбюЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЯЧСМИТЬБЮ"
KEYS_UA = "йцукенгшщзхїфівапролджєячсмитьбюЙЦУКЕНГШЩЗХЇФІВАПРОЛДЖЯЧСМИТЬБЮ"
CONTROL_KEYMAP_REGEX = re.compile(r'^<C-(.*)>$')
SHIFT_KEYMAP_REGEX = re.compile(r'^<S-(.*)>$')


def json_dumps(data):
    return json.dumps(data, indent=2, ensure_ascii=False)


def get_args():
    parser = argparse.ArgumentParser(description='Translate vimvixen keymaps')
    parser.add_argument('-u', '--update-db', type=str, required=False,
                        help='update the storage-sync DB with new values')
    return parser.parse_args()


def translate_keymaps():
    with open(INPUT_CONFIG_FILE) as fin:
        config_json = json.loads(fin.read())

    ru_table = str.maketrans(KEYS_EN, KEYS_RU)
    ua_table = str.maketrans(KEYS_EN, KEYS_UA)

    keymaps_orig = config_json['keymaps']
    keymaps_new = {}
    for km in keymaps_orig:
        if match := CONTROL_KEYMAP_REGEX.match(km):
            # '<C-x>'
            if len(match.group(1)) == 1:
                km_ru = f'<C-{match.group(1).translate(ru_table)}>'
                km_ua = f'<C-{match.group(1).translate(ua_table)}>'
        elif match := SHIFT_KEYMAP_REGEX.match(km):
            # '<S-x>'
            if len(match.group(1)) == 1:
                km_ru = f'<S-{match.group(1).translate(ru_table)}>'
                km_ua = f'<S-{match.group(1).translate(ua_table)}>'
        else:
            # 'x', 'gx'
            km_ru = km.translate(ru_table)
            km_ua = km.translate(ua_table)

        keymaps_new[km_ru] = keymaps_orig[km]
        keymaps_new[km_ua] = keymaps_orig[km]

    keymaps_new.update(keymaps_orig)
    config_json['keymaps'] = keymaps_new
    return config_json


def update_db(config_json, db_path):
    """Update config in the database."""
    data = json_dumps({
        'settings': {
            'source': 'json',
            'json': json_dumps(config_json)
        }
    })
    with sqlite3.connect(db_path) as con:
        cur = con.cursor()
        cur.execute('''
        UPDATE
            storage_sync_data
        SET
            data = :data
        WHERE
            ext_id = "vim-vixen@i-beam.org"
        ''', {'data': data})


def main():
    args = get_args()
    config_json = translate_keymaps()
    print(json_dumps(config_json))
    if args.update_db:
        update_db(config_json, db_path=args.update_db)
        print('Updated the DB')


if __name__ == '__main__':
    main()
